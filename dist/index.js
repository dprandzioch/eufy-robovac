module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){e.exports=function(e){function t(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){let n;function i(...e){if(!i.enabled)return;const t=i,s=Number(new Date),o=s-(n||s);t.diff=o,t.prev=n,t.curr=s,n=s,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let c=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(n,s)=>{if("%%"===n)return n;c++;const o=r.formatters[s];if("function"==typeof o){const r=e[c];n=o.call(t,r),e.splice(c,1),c--}return n}),r.formatArgs.call(t,e),(t.log||r.log).apply(t,e)}return i.namespace=e,i.enabled=r.enabled(e),i.useColors=r.useColors(),i.color=t(e),i.destroy=s,i.extend=o,"function"==typeof r.init&&r.init(i),r.instances.push(i),i}function s(){const e=r.instances.indexOf(this);return-1!==e&&(r.instances.splice(e,1),!0)}function o(e,t){const n=r(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(e){return e instanceof Error?e.stack||e.message:e},r.disable=function(){const e=[...r.names.map(i),...r.skips.map(i).map(e=>"-"+e)].join(",");return r.enable(""),e},r.enable=function(e){let t;r.save(e),r.names=[],r.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),s=n.length;for(t=0;t<s;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){const e=r.instances[t];e.enabled=r.enabled(e.namespace)}},r.enabled=function(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=n(14),Object.keys(e).forEach(t=>{r[t]=e[t]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}},function(e,t,n){"use strict";n.r(t),n.d(t,"CleanSpeed",function(){return r}),n.d(t,"ErrorCode",function(){return s}),n.d(t,"WorkStatus",function(){return o}),n.d(t,"Direction",function(){return i}),n.d(t,"WorkMode",function(){return c}),n.d(t,"RoboVac",function(){return l});var r,s,o,i,c,a=function(e,t,n,r){return new(n||(n=Promise))(function(s,o){function i(e){try{a(r.next(e))}catch(e){o(e)}}function c(e){try{a(r.throw(e))}catch(e){o(e)}}function a(e){e.done?s(e.value):new n(function(t){t(e.value)}).then(i,c)}a((r=r.apply(e,t||[])).next())})},u=function(e,t){var n,r,s,o,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(s=2&o[0]?r.return:o[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,o[1])).done)return s;switch(r=0,s&&(o=[2&o[0],s.value]),o[0]){case 0:case 1:s=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(s=(s=i.trys).length>0&&s[s.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!s||o[1]>s[0]&&o[1]<s[3])){i.label=o[1];break}if(6===o[0]&&i.label<s[1]){i.label=s[1],s=o;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(o);break}s[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=s=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},h=n(2);!function(e){e.NO_SUCTION="No_suction",e.STANDARD="Standard",e.BOOST_IQ="Boost_IQ",e.MAX="Max"}(r||(r={})),function(e){e.NO_ERROR="no_error",e.WHEEL_STUCK="Wheel_stuck",e.R_BRUSH_STUCK="R_brush_stuck",e.CRASH_BAR_STUCK="Crash_bar_stuck",e.SENSOR_DIRTY="sensor_dirty",e.NOT_ENOUGH_POWER="N_enough_pow",e.STUCK_5_MIN="Stuck_5_min",e.FAN_STUCK="Fan_stuck",e.S_BRUSH_STUCK="S_brush_stuck"}(s||(s={})),function(e){e.RUNNING="Running",e.CHARGING="Charging",e.STAND_BY="standby",e.SLEEPING="Sleeping",e.RECHARGE_NEEDED="Recharge",e.COMPLETED="completed"}(o||(o={})),function(e){e.LEFT="left",e.RIGHT="right",e.FORWARD="forward",e.BACKWARD="backward"}(i||(i={})),function(e){e.AUTO="auto",e.NO_SWEEP="Nosweep",e.SMALL_ROOM="SmallRoom",e.EDGE="Edge",e.SPOT="Spot"}(c||(c={}));var l=function(){function e(e){var t=this;if(this.PLAY_PAUSE="2",this.DIRECTION="3",this.WORK_MODE="5",this.WORK_STATUS="15",this.GO_HOME="101",this.CLEAN_SPEED="102",this.FIND_ROBOT="103",this.BATTERY_LEVEL="104",this.ERROR_CODE="106",this.connected=!1,this.statuses=null,this.lastStatusUpdate=null,this.maxStatusUpdateAge=3e4,!e.deviceId&&!e.ip)throw new Error("You must pass through deviceId OR ip");this.api=new h({id:e.deviceId,key:e.localKey,ip:e.ip,version:3.3}),this.api.on("error",function(e){console.error(JSON.stringify(e,null,4))}),this.api.on("connected",function(){t.connected=!0,console.log("Connected!")}),this.api.on("disconnected",function(){t.connected=!1,console.log("Disconnected!")}),this.api.on("data",function(e){t.statuses=e,t.lastStatusUpdate=(new Date).getTime(),console.log("Status Updated!")})}return e.prototype.connect=function(){return a(this,void 0,void 0,function(){return u(this,function(e){switch(e.label){case 0:return this.connected?[3,2]:(console.log("Connecting..."),[4,this.api.connect()]);case 1:e.sent(),e.label=2;case 2:return[2]}})})},e.prototype.disconnect=function(){return a(this,void 0,void 0,function(){return u(this,function(e){switch(e.label){case 0:return console.log("Disconnecting..."),[4,this.api.disconnect()];case 1:return e.sent(),[2]}})})},e.prototype.doWork=function(e){return a(this,void 0,void 0,function(){return u(this,function(t){switch(t.label){case 0:return this.api.device.id&&this.api.device.ip?[3,2]:(console.log("Looking for device..."),[4,this.api.find()]);case 1:t.sent(),console.log("Found device "+this.api.device.id+" at "+this.api.device.ip),t.label=2;case 2:return[4,this.connect()];case 3:return t.sent(),[4,e()];case 4:return[2,t.sent()]}})})},e.prototype.getStatuses=function(e){return void 0===e&&(e=!1),a(this,void 0,void 0,function(){var t=this;return u(this,function(n){switch(n.label){case 0:return e||(new Date).getTime()-this.lastStatusUpdate>this.maxStatusUpdateAge?[4,this.doWork(function(){return a(t,void 0,void 0,function(){var e;return u(this,function(t){switch(t.label){case 0:return e=this,[4,this.api.get({schema:!0})];case 1:return e.statuses=t.sent(),this.lastStatusUpdate=(new Date).getTime(),[2,this.statuses]}})})})]:[3,2];case 1:return[2,n.sent()];case 2:return[2,this.statuses]}})})},e.prototype.getCleanSpeed=function(e){return void 0===e&&(e=!1),a(this,void 0,void 0,function(){return u(this,function(t){switch(t.label){case 0:return[4,this.getStatuses(e)];case 1:return[2,t.sent().dps[this.CLEAN_SPEED]]}})})},e.prototype.setCleanSpeed=function(e){return a(this,void 0,void 0,function(){var t=this;return u(this,function(n){switch(n.label){case 0:return[4,this.doWork(function(){return a(t,void 0,void 0,function(){var t;return u(this,function(n){switch(n.label){case 0:return[4,this.set((t={},t[this.CLEAN_SPEED]=e,t))];case 1:return n.sent(),[2]}})})})];case 1:return n.sent(),[2]}})})},e.prototype.getPlayPause=function(e){return void 0===e&&(e=!1),a(this,void 0,void 0,function(){return u(this,function(t){switch(t.label){case 0:return[4,this.getStatuses(e)];case 1:return[2,t.sent().dps[this.PLAY_PAUSE]]}})})},e.prototype.setPlayPause=function(e){return a(this,void 0,void 0,function(){var t=this;return u(this,function(n){switch(n.label){case 0:return[4,this.doWork(function(){return a(t,void 0,void 0,function(){var t;return u(this,function(n){switch(n.label){case 0:return[4,this.set((t={},t[this.PLAY_PAUSE]=e,t))];case 1:return n.sent(),[2]}})})})];case 1:return n.sent(),[2]}})})},e.prototype.play=function(){return a(this,void 0,void 0,function(){return u(this,function(e){switch(e.label){case 0:return[4,this.setPlayPause(!0)];case 1:return e.sent(),[2]}})})},e.prototype.pause=function(){return a(this,void 0,void 0,function(){return u(this,function(e){switch(e.label){case 0:return[4,this.setPlayPause(!0)];case 1:return e.sent(),[2]}})})},e.prototype.getWorkMode=function(e){return void 0===e&&(e=!1),a(this,void 0,void 0,function(){return u(this,function(t){switch(t.label){case 0:return[4,this.getStatuses(e)];case 1:return[2,t.sent().dps[this.WORK_MODE]]}})})},e.prototype.setWorkMode=function(e){return a(this,void 0,void 0,function(){var t=this;return u(this,function(n){switch(n.label){case 0:return[4,this.doWork(function(){return a(t,void 0,void 0,function(){var t;return u(this,function(n){switch(n.label){case 0:return console.log("Setting WorkMode to "+e),[4,this.set((t={},t[this.WORK_MODE]=e,t))];case 1:return n.sent(),[2]}})})})];case 1:return n.sent(),[2]}})})},e.prototype.startCleaning=function(e){return void 0===e&&(e=!1),a(this,void 0,void 0,function(){var t,n,r,s;return u(this,function(o){switch(o.label){case 0:return console.log("Starting Cleaning"),n=(t=console).log,s=(r=JSON).stringify,[4,this.getStatuses(e)];case 1:return n.apply(t,[s.apply(r,[o.sent(),null,4])]),[4,this.setWorkMode(c.AUTO)];case 2:return o.sent(),console.log("Cleaning Started!"),[2]}})})},e.prototype.getWorkStatus=function(e){return void 0===e&&(e=!1),a(this,void 0,void 0,function(){return u(this,function(t){switch(t.label){case 0:return[4,this.getStatuses(e)];case 1:return[2,t.sent().dps[this.WORK_STATUS]]}})})},e.prototype.setWorkStatus=function(e){return a(this,void 0,void 0,function(){var t=this;return u(this,function(n){switch(n.label){case 0:return[4,this.doWork(function(){return a(t,void 0,void 0,function(){var t;return u(this,function(n){switch(n.label){case 0:return[4,this.set((t={},t[this.WORK_STATUS]=e,t))];case 1:return n.sent(),[2]}})})})];case 1:return n.sent(),[2]}})})},e.prototype.goHome=function(){return a(this,void 0,void 0,function(){var e=this;return u(this,function(t){switch(t.label){case 0:return[4,this.doWork(function(){return a(e,void 0,void 0,function(){var e;return u(this,function(t){switch(t.label){case 0:return[4,this.set((e={},e[this.GO_HOME]=!0,e))];case 1:return t.sent(),[2]}})})})];case 1:return t.sent(),[2]}})})},e.prototype.setFindRobot=function(e){return a(this,void 0,void 0,function(){var t=this;return u(this,function(n){switch(n.label){case 0:return[4,this.doWork(function(){return a(t,void 0,void 0,function(){var t;return u(this,function(n){switch(n.label){case 0:return[4,this.set((t={},t[this.FIND_ROBOT]=e,t))];case 1:return n.sent(),[2]}})})})];case 1:return n.sent(),[2]}})})},e.prototype.getFindRobot=function(e){return void 0===e&&(e=!1),a(this,void 0,void 0,function(){return u(this,function(t){switch(t.label){case 0:return[4,this.getStatuses(e)];case 1:return[2,t.sent().dps[this.FIND_ROBOT]]}})})},e.prototype.getBatteyLevel=function(e){return void 0===e&&(e=!1),a(this,void 0,void 0,function(){return u(this,function(t){switch(t.label){case 0:return[4,this.getStatuses(e)];case 1:return[2,t.sent().dps[this.BATTERY_LEVEL]]}})})},e.prototype.getErrorCode=function(e){return void 0===e&&(e=!1),a(this,void 0,void 0,function(){return u(this,function(t){switch(t.label){case 0:return[4,this.getStatuses(e)];case 1:return[2,t.sent().dps[this.ERROR_CODE]]}})})},e.prototype.set=function(e){return a(this,void 0,void 0,function(){return u(this,function(t){switch(t.label){case 0:return console.log("Setting: "+JSON.stringify(e,null,4)),[4,this.api.set({multiple:!0,data:e})];case 1:return t.sent(),[2]}})})},e.prototype.formatStatus=function(){console.log("-- Status Start --"),console.log(" - Play/Pause: "+this.statuses.dps[this.PLAY_PAUSE]),console.log(" - Direction: "+this.statuses.dps[this.DIRECTION]),console.log(" - Work Mode: "+this.statuses.dps[this.WORK_MODE]),console.log(" - Go Home: "+this.statuses.dps[this.GO_HOME]),console.log(" - Clean Speed: "+this.statuses.dps[this.CLEAN_SPEED]),console.log(" - Find Robot: "+this.statuses.dps[this.FIND_ROBOT]),console.log(" - Battery Level: "+this.statuses.dps[this.BATTERY_LEVEL]),console.log(" - Error Code: "+this.statuses.dps[this.ERROR_CODE]),console.log("-- Status End --")},e}()},function(e,t,n){const r=n(3),s=n(4),{EventEmitter:o}=n(5),i=n(6),c=n(8),a=n(12)("TuyAPI"),{isValidString:u}=n(21),{MessageParser:h,CommandType:l}=n(22);e.exports=class extends o{constructor({ip:e,port:t=6668,id:n,gwID:r=n,key:s,productKey:o,version:i=3.1}={}){if(super(),this.device={ip:e,port:t,id:n,gwID:r,key:s,productKey:o,version:i},!u(n)&&!u(e))throw new TypeError("ID and IP are missing from device.");if(!u(this.device.key)||16!==this.device.key.length)throw new TypeError("Key is missing or incorrect.");this.device.parser=new h({key:this.device.key,version:this.device.version}),this.foundDevices=[],this._connected=!1,this._responseTimeout=5,this._connectTimeout=5,this._pingPongPeriod=10,this._currentSequenceN=0,this._resolvers={},this._waitingForSetToResolve=!1}get(e={}){const t={gwId:this.device.gwID,devId:this.device.id};a("GET Payload:"),a(t);const n=this.device.parser.encode({data:t,commandByte:l.DP_QUERY,sequenceN:++this._currentSequenceN});return new Promise((t,r)=>{try{this._send(n).then(n=>{!0===e.schema?t(n):e.dps?t(n.dps[e.dps]):t(n.dps[1])})}catch(e){r(e)}})}set(e){if(void 0===e||0===Object.entries(e).length)throw new TypeError("No arguments were passed.");let t={};t=!0===e.multiple?e.data:void 0===e.dps?{1:e.set}:{[e.dps.toString()]:e.set};const n=parseInt(new Date/1e3,10),r={devId:this.device.id,gwId:this.device.gwID,uid:"",t:n,dps:t};a("SET Payload:"),a(r);const s=this.device.parser.encode({data:r,encrypted:!0,commandByte:l.CONTROL,sequenceN:++this._currentSequenceN});return this._waitingForSetToResolve=!0,new Promise((e,t)=>{try{this._send(s),this._setResolver=e}catch(e){t(e)}})}_send(e){if(!this.isConnected())throw new Error("No connection has been made to the device.");return c(()=>new Promise((t,n)=>{try{this.client.write(e),this._resolvers[this._currentSequenceN]=(e=>t(e))}catch(e){n(e)}}),{retries:5})}async _sendPing(){a(`Pinging ${this.device.ip}`);const e=this.device.parser.encode({data:Buffer.allocUnsafe(0),commandByte:l.HEART_BEAT,sequenceN:++this._currentSequenceN});await this._send(e)}connect(){return this.isConnected()?Promise.resolve(!0):new Promise((e,t)=>{this.client=new s.Socket,a(`Connecting to ${this.device.ip}...`),this.client.connect(this.device.port,this.device.ip),this.client.setTimeout(1e3*this._connectTimeout,()=>{this.client.destroy(),t(new Error("connection timed out"))}),this.client.on("data",e=>{let t;a(`Received data: ${e.toString("hex")}`);try{t=this.device.parser.parse(e)}catch(e){return a(e),void this.emit("error",e)}t.forEach(e=>{a("Parsed:"),a(e),this._packetHandler.bind(this)(e)})}),this.client.on("error",e=>{a("Error event from socket.",this.device.ip,e),this.emit("error",new Error("Error from socket")),this.client.destroy()}),this.client.on("close",()=>{a(`Socket closed: ${this.device.ip}`),this._connected=!1,this.emit("disconnected"),this.client.destroy(),this.pingpongTimeout&&(clearTimeout(this.pingpongTimeout),this.pingpongTimeout=null)}),this.client.on("connect",async()=>{a("Socket connected."),this._connected=!0,this.client.setTimeout(0),this.emit("connected"),this.pingpongTimeout=setInterval(async()=>{await this._sendPing()},1e3*this._pingPongPeriod),await this.get(),e(!0)})})}_packetHandler(e){if(clearTimeout(this._sendTimeout),e.commandByte===l.HEART_BEAT)return a(`Pong from ${this.device.ip}`),void delete this._resolvers[e.sequenceN];if(e.commandByte!==l.CONTROL||!1!==e.payload){if(this.emit("data",e.payload,e.commandByte,e.sequenceN),0===e.sequenceN&&e.commandByte===l.STATUS&&this._waitingForSetToResolve&&"function"==typeof this._setResolver)return this._setResolver(e.payload),void(this._setResolver=void 0);e.sequenceN in this._resolvers&&(this._resolvers[e.sequenceN](e.payload),delete this._resolvers[e.sequenceN])}else a("Got SET ack.")}disconnect(){a("Disconnect"),this._connected=!1,clearTimeout(this._sendTimeout),clearTimeout(this._connectTimeout),clearTimeout(this._responseTimeout),clearTimeout(this.pingpongTimeout),this.client&&this.client.destroy()}isConnected(){return this._connected}resolveId(e){return console.warn("resolveId() is deprecated since v4.0.0. Will be removed in v5.0.0. Use find() instead."),this.find(e)}find({timeout:e=10,all:t=!1}={}){if(u(this.device.id)&&u(this.device.ip))return a("IP and ID are already both resolved."),Promise.resolve(!0);const n=r.createSocket({type:"udp4",reuseAddr:!0});n.bind(6666);const s=r.createSocket({type:"udp4",reuseAddr:!0});s.bind(6667);const o=(e,r)=>o=>{let i;a("Received UDP message.");try{i=this.device.parser.parse(o)[0]}catch(e){a(e),r(e)}a("UDP data:"),a(i);const c=i.payload.gwId,u=i.payload.ip;this.foundDevices.some(e=>e.id===c&&e.ip===u)||this.foundDevices.push({id:c,ip:u}),t||this.device.id!==c&&this.device.ip!==u||!i.payload||(this.device.ip=i.payload.ip,this.device.id=i.payload.gwId,this.device.gwID=i.payload.gwId,this.device.productKey=i.payload.productKey,this.device.version!==i.payload.version&&(this.device.version=i.payload.version,this.device.parser=new h({key:this.device.key,version:this.device.version})),n.close(),n.removeAllListeners(),s.close(),s.removeAllListeners(),e(!0))};return a(`Finding missing IP ${this.device.ip} or ID ${this.device.id}`),i(new Promise((e,t)=>{n.on("message",o(e,t)),n.on("error",e=>{t(e)}),s.on("message",o(e,t)),s.on("error",e=>{t(e)})}),1e3*e,()=>{if(n.close(),n.removeAllListeners(),s.close(),s.removeAllListeners(),t)return this.foundDevices;throw new Error("find() timed out. Is the device powered on and the ID or IP correct?")})}async toggle(e="1"){e=e.toString();const t=await this.get({dps:e});return await this.set({set:!t,dps:e}),this.get({dps:e})}}},function(e,t){e.exports=require("dgram")},function(e,t){e.exports=require("net")},function(e,t){e.exports=require("events")},function(e,t,n){"use strict";const r=n(7);class s extends Error{constructor(e){super(e),this.name="TimeoutError"}}const o=(e,t,n)=>new Promise((o,i)=>{if("number"!=typeof t||t<0)throw new TypeError("Expected `milliseconds` to be a positive number");const c=setTimeout(()=>{if("function"==typeof n){try{o(n())}catch(e){i(e)}return}const r=n instanceof Error?n:new s("string"==typeof n?n:`Promise timed out after ${t} milliseconds`);"function"==typeof e.cancel&&e.cancel(),i(r)},t);r(e.then(o,i),()=>{clearTimeout(c)})});e.exports=o,e.exports.default=o,e.exports.TimeoutError=s},function(e,t,n){"use strict";e.exports=((e,t)=>(t=t||(()=>{}),e.then(e=>new Promise(e=>{e(t())}).then(()=>e),e=>new Promise(e=>{e(t())}).then(()=>{throw e}))))},function(e,t,n){"use strict";const r=n(9);class s extends Error{constructor(e){super(),e instanceof Error?(this.originalError=e,({message:e}=e)):(this.originalError=new Error(e),this.originalError.stack=this.stack),this.name="AbortError",this.message=e}}const o=(e,t)=>new Promise((n,o)=>{t={onFailedAttempt:()=>{},retries:10,...t};const i=r.operation(t);i.attempt(async r=>{try{n(await e(r))}catch(e){if(!(e instanceof Error))return void o(new TypeError(`Non-error was thrown: "${e}". You should only throw errors.`));e instanceof s?(i.stop(),o(e.originalError)):e instanceof TypeError?(i.stop(),o(e)):(((e,t,n)=>{const r=n.retries-(t-1);e.attemptNumber=t,e.retriesLeft=r})(e,r,t),t.onFailedAttempt(e),i.retry(e)||o(i.mainError()))}})});e.exports=o,e.exports.default=o,e.exports.AbortError=s},function(e,t,n){e.exports=n(10)},function(e,t,n){var r=n(11);t.operation=function(e){var n=t.timeouts(e);return new r(n,{forever:e&&e.forever,unref:e&&e.unref,maxRetryTime:e&&e.maxRetryTime})},t.timeouts=function(e){if(e instanceof Array)return[].concat(e);var t={retries:10,factor:2,minTimeout:1e3,maxTimeout:1/0,randomize:!1};for(var n in e)t[n]=e[n];if(t.minTimeout>t.maxTimeout)throw new Error("minTimeout is greater than maxTimeout");for(var r=[],s=0;s<t.retries;s++)r.push(this.createTimeout(s,t));return e&&e.forever&&!r.length&&r.push(this.createTimeout(s,t)),r.sort(function(e,t){return e-t}),r},t.createTimeout=function(e,t){var n=t.randomize?Math.random()+1:1,r=Math.round(n*t.minTimeout*Math.pow(t.factor,e));return r=Math.min(r,t.maxTimeout)},t.wrap=function(e,n,r){if(n instanceof Array&&(r=n,n=null),!r)for(var s in r=[],e)"function"==typeof e[s]&&r.push(s);for(var o=0;o<r.length;o++){var i=r[o],c=e[i];e[i]=function(r){var s=t.operation(n),o=Array.prototype.slice.call(arguments,1),i=o.pop();o.push(function(e){s.retry(e)||(e&&(arguments[0]=s.mainError()),i.apply(this,arguments))}),s.attempt(function(){r.apply(e,o)})}.bind(e,c),e[i].options=n}}},function(e,t){function n(e,t){"boolean"==typeof t&&(t={forever:t}),this._originalTimeouts=JSON.parse(JSON.stringify(e)),this._timeouts=e,this._options=t||{},this._maxRetryTime=t&&t.maxRetryTime||1/0,this._fn=null,this._errors=[],this._attempts=1,this._operationTimeout=null,this._operationTimeoutCb=null,this._timeout=null,this._operationStart=null,this._options.forever&&(this._cachedTimeouts=this._timeouts.slice(0))}e.exports=n,n.prototype.reset=function(){this._attempts=1,this._timeouts=this._originalTimeouts},n.prototype.stop=function(){this._timeout&&clearTimeout(this._timeout),this._timeouts=[],this._cachedTimeouts=null},n.prototype.retry=function(e){if(this._timeout&&clearTimeout(this._timeout),!e)return!1;var t=(new Date).getTime();if(e&&t-this._operationStart>=this._maxRetryTime)return this._errors.unshift(new Error("RetryOperation timeout occurred")),!1;this._errors.push(e);var n=this._timeouts.shift();if(void 0===n){if(!this._cachedTimeouts)return!1;this._errors.splice(this._errors.length-1,this._errors.length),this._timeouts=this._cachedTimeouts.slice(0),n=this._timeouts.shift()}var r=this,s=setTimeout(function(){r._attempts++,r._operationTimeoutCb&&(r._timeout=setTimeout(function(){r._operationTimeoutCb(r._attempts)},r._operationTimeout),r._options.unref&&r._timeout.unref()),r._fn(r._attempts)},n);return this._options.unref&&s.unref(),!0},n.prototype.attempt=function(e,t){this._fn=e,t&&(t.timeout&&(this._operationTimeout=t.timeout),t.cb&&(this._operationTimeoutCb=t.cb));var n=this;this._operationTimeoutCb&&(this._timeout=setTimeout(function(){n._operationTimeoutCb()},n._operationTimeout)),this._operationStart=(new Date).getTime(),this._fn(this._attempts)},n.prototype.try=function(e){console.log("Using RetryOperation.try() is deprecated"),this.attempt(e)},n.prototype.start=function(e){console.log("Using RetryOperation.start() is deprecated"),this.attempt(e)},n.prototype.start=n.prototype.try,n.prototype.errors=function(){return this._errors},n.prototype.attempts=function(){return this._attempts},n.prototype.mainError=function(){if(0===this._errors.length)return null;for(var e={},t=null,n=0,r=0;r<this._errors.length;r++){var s=this._errors[r],o=s.message,i=(e[o]||0)+1;e[o]=i,i>=n&&(t=s,n=i)}return t}},function(e,t,n){"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=n(13):e.exports=n(15)},function(e,t,n){t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,s=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(r++,"%c"===e&&(s=r))}),t.splice(s,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(0)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},function(e,t){var n=1e3,r=60*n,s=60*r,o=24*s,i=7*o,c=365.25*o;function a(e,t,n,r){var s=t>=1.5*n;return Math.round(e/n)+" "+r+(s?"s":"")}e.exports=function(e,t){t=t||{};var u=typeof e;if("string"===u&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*c;case"weeks":case"week":case"w":return a*i;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*s;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===u&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=o)return a(e,t,o,"day");if(t>=s)return a(e,t,s,"hour");if(t>=r)return a(e,t,r,"minute");if(t>=n)return a(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=o)return Math.round(e/o)+"d";if(t>=s)return Math.round(e/s)+"h";if(t>=r)return Math.round(e/r)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){const r=n(16),s=n(17);t.init=function(e){e.inspectOpts={};const n=Object.keys(t.inspectOpts);for(let r=0;r<n.length;r++)e.inspectOpts[n[r]]=t.inspectOpts[n[r]]},t.log=function(...e){return process.stderr.write(s.format(...e)+"\n")},t.formatArgs=function(n){const{namespace:r,useColors:s}=this;if(s){const t=this.color,s="[3"+(t<8?t:"8;5;"+t),o=`  ${s};1m${r} [0m`;n[0]=o+n[0].split("\n").join("\n"+o),n.push(s+"m+"+e.exports.humanize(this.diff)+"[0m")}else n[0]=function(){if(t.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+r+" "+n[0]},t.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},t.load=function(){return process.env.DEBUG},t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):r.isatty(process.stderr.fd)},t.colors=[6,2,3,4,5,1];try{const e=n(18);e&&(e.stderr||e).level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}t.inspectOpts=Object.keys(process.env).filter(e=>/^debug_/i.test(e)).reduce((e,t)=>{const n=t.substring(6).toLowerCase().replace(/_([a-z])/g,(e,t)=>t.toUpperCase());let r=process.env[t];return r=!!/^(yes|on|true|enabled)$/i.test(r)||!/^(no|off|false|disabled)$/i.test(r)&&("null"===r?null:Number(r)),e[n]=r,e},{}),e.exports=n(0)(t);const{formatters:o}=e.exports;o.o=function(e){return this.inspectOpts.colors=this.useColors,s.inspect(e,this.inspectOpts).replace(/\s*\n\s*/g," ")},o.O=function(e){return this.inspectOpts.colors=this.useColors,s.inspect(e,this.inspectOpts)}},function(e,t){e.exports=require("tty")},function(e,t){e.exports=require("util")},function(e,t,n){"use strict";const r=n(19),s=n(20),o=process.env;let i;function c(e){return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(function(e){if(!1===i)return 0;if(s("color=16m")||s("color=full")||s("color=truecolor"))return 3;if(s("color=256"))return 2;if(e&&!e.isTTY&&!0!==i)return 0;const t=i?1:0;if("win32"===process.platform){const e=r.release().split(".");return Number(process.versions.node.split(".")[0])>=8&&Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in o)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some(e=>e in o)||"codeship"===o.CI_NAME?1:t;if("TEAMCITY_VERSION"in o)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(o.TEAMCITY_VERSION)?1:0;if("truecolor"===o.COLORTERM)return 3;if("TERM_PROGRAM"in o){const e=parseInt((o.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(o.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(o.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(o.TERM)?1:"COLORTERM"in o?1:(o.TERM,t)}(e))}s("no-color")||s("no-colors")||s("color=false")?i=!1:(s("color")||s("colors")||s("color=true")||s("color=always"))&&(i=!0),"FORCE_COLOR"in o&&(i=0===o.FORCE_COLOR.length||0!==parseInt(o.FORCE_COLOR,10)),e.exports={supportsColor:c,stdout:c(process.stdout),stderr:c(process.stderr)}},function(e,t){e.exports=require("os")},function(e,t,n){"use strict";e.exports=((e,t)=>{t=t||process.argv;const n=e.startsWith("-")?"":1===e.length?"-":"--",r=t.indexOf(n+e),s=t.indexOf("--");return-1!==r&&(-1===s||r<s)})},function(e,t){e.exports={isValidString:function(e){return"string"==typeof e&&e.length>0}}},function(e,t,n){const r=n(23),s=n(26),o=16,i={UDP:0,AP_CONFIG:1,ACTIVE:2,BIND:3,RENAME_GW:4,RENAME_DEVICE:5,UNBIND:6,CONTROL:7,STATUS:8,HEART_BEAT:9,DP_QUERY:10,QUERY_WIFI:11,TOKEN_BIND:12,CONTROL_NEW:13,ENABLE_WIFI:14,DP_QUERY_NEW:16,SCENE_EXECUTE:17,UDP_NEW:19,AP_CONFIG_NEW:20,LAN_GW_ACTIVE:240,LAN_SUB_DEV_REQUEST:241,LAN_DELETE_SUB_DEV:242,LAN_REPORT_SUB_DEV:243,LAN_SCENE:244,LAN_PUBLISH_CLOUD_CONFIG:245,LAN_PUBLISH_APP_CONFIG:246,LAN_EXPORT_APP_CONFIG:247,LAN_PUBLISH_SCENE_PANEL:248,LAN_REMOVE_GW:249,LAN_CHECK_GW_UPDATE:250,LAN_GW_UPDATE:251,LAN_SET_GW_CHANNEL:252};e.exports={MessageParser:class{constructor({key:e,version:t=3.1}={}){if(t=t.toString(),this.version=t,e){if(16!==e.length)throw new TypeError("Incorrect key format");this.cipher=new r({key:e,version:t})}}parsePacket(e){if(e.length<24)throw new TypeError(`Packet too short. Length: ${e.length}.`);if(21930!==e.readUInt32BE(0))throw new TypeError(`Prefix does not match: ${e.toString("hex")}`);let t=!1;const n=e.indexOf("0000AA55",0,"hex");if(n!==e.length-4&&(t=e.slice(n+4),e=e.slice(0,n+4)),43605!==e.readUInt32BE(e.length-4))throw new TypeError(`Suffix does not match: ${e.toString("hex")}`);const r=e.readUInt32BE(4),i=e.readUInt32BE(8),c=e.readUInt32BE(12);if(e.length-8<c)throw new TypeError(`Packet missing payload: payload has length ${c}.`);let a;a=4294967040&e.readUInt32BE(16)?e.slice(o,o+c-8):e.slice(o+4,o+c-8);const u=e.readInt32BE(o+c-8),h=s(e.slice(0,c+8));if(u!==h)throw new Error(`CRC mismatch: expected ${u}, was ${h}. ${e.toString("hex")}`);return{payload:a,leftover:t,commandByte:i,sequenceN:r}}getPayload(e){if(0===e.length)return!1;try{if(!this.cipher)throw new Error("Missing key or version in constructor.");e=this.cipher.decrypt(e)}catch(t){e=e.toString("utf8")}if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}parseRecursive(e,t){const n=this.parsePacket(e);return n.payload=this.getPayload(n.payload),t.push(n),n.leftover?this.parseRecursive(n.leftover,t):t}parse(e){return this.parseRecursive(e,[])}encode(e){if(-1===Object.values(i).indexOf(e.commandByte))throw new TypeError("Command byte not defined.");e.data instanceof Buffer||("string"!=typeof e.data&&(e.data=JSON.stringify(e.data)),e.data=Buffer.from(e.data));let t=e.data;if("3.3"===this.version){if(t=this.cipher.encrypt({data:t,base64:!1}),e.commandByte!==i.DP_QUERY){const e=Buffer.alloc(t.length+15);Buffer.from("3.3").copy(e,0),t.copy(e,15),t=e}}else if(e.encrypted){t=this.cipher.encrypt({data:t});const e=this.cipher.md5("data="+t+"||lpv="+this.version+"||"+this.key);t=Buffer.from(this.version+e+t)}const n=Buffer.alloc(t.length+24);return n.writeUInt32BE(21930,0),n.writeUInt32BE(e.commandByte,8),n.writeUInt32BE(t.length+8,12),e.sequenceN&&n.writeUInt32BE(e.sequenceN,4),t.copy(n,16),n.writeInt32BE(s(n.slice(0,t.length+16)),t.length+16),n.writeUInt32BE(43605,t.length+20),n}},CommandType:i}},function(e,t,n){const r=n(24),s=n(25),o=r.createHash("md5").update(s.udpKey,"utf8").digest();e.exports=class{constructor(e){this.key=e.key,this.version=e.version.toString()}encrypt(e){const t=r.createCipheriv("aes-128-ecb",this.key,"");let n=t.update(e.data,"utf8","base64");return n+=t.final("base64"),!1===e.base64?Buffer.from(n,"base64"):n}decrypt(e){let t,n="buffer";0===e.indexOf(this.version)&&("3.3"===this.version?e=e.slice(15):(e=e.slice(19).toString(),n="base64"));try{const s=r.createDecipheriv("aes-128-ecb",this.key,"");t=s.update(e,n,"utf8"),t+=s.final("utf8")}catch(s){try{const s=r.createDecipheriv("aes-128-ecb",o,"");t=s.update(e,n,"utf8"),t+=s.final("utf8")}catch(e){throw new Error("Decrypt failed")}}try{return JSON.parse(t)}catch(e){return t}}md5(e){return r.createHash("md5").update(e,"utf8").digest("hex").substr(8,16)}}},function(e,t){e.exports=require("crypto")},function(e){e.exports={udpKey:"yGAdlopoPVldABfn"}},function(e,t){const n=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];e.exports=function(e){let t=4294967295;for(const r of e)t=t>>>8^n[255&(t^r)];return 4294967295^t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,